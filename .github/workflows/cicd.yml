name: Build and Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - master

jobs:
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}/backend

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: backend
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}/frontend

      - name: Create .env File
        run: |
          touch .env
          echo "export NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}" >> .env

      - name: Build and Push
        uses: docker/build-push-action@v3
        with:
          context: frontend
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          secret-files: |
            SECRETS=.env

  deploy-backend:
    runs-on: ubuntu-latest
    needs:
      - build-backend
    steps:
      - name: Trigger Webhooks
        run: |
          curl -X POST -H 'Content-Type: application-json' ${{ secrets.BACKEND_WEBHOOK_URL }}

  deploy-frontend:
    runs-on: ubuntu-latest
    needs:
      - build-frontend
    steps:
      - name: Trigger Webhooks
        run: |
          curl -X POST -H 'Content-Type: application-json' ${{ secrets.FRONTEND_WEBHOOK_URL }}
